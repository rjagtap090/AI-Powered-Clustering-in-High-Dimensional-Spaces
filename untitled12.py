# -*- coding: utf-8 -*-
"""Untitled12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tiS6RqHiZ3YAzQizHVLd59f9foFXzkZC
"""

import numpy as np
import pandas as pd
from sklearn.decomposition import PCA
from sklearn.manifold import TSNE
from sklearn.cluster import KMeans, DBSCAN
from sklearn.metrics import silhouette_score, davies_bouldin_score
import matplotlib.pyplot as plt
import seaborn as sns

# Load dataset
data = pd.read_csv('your_dataset.csv')

# Data Cleaning and Preparation
# Assuming the dataset needs to be cleaned
data.dropna(inplace=True)  # Drop missing values

# Feature Selection
# Assuming the dataset has features that need to be selected
selected_features = data[['feature1', 'feature2', 'feature3']]  # Replace with actual feature names

# Dimensionality Reduction using PCA
pca = PCA(n_components=2)
pca_result = pca.fit_transform(selected_features)

# Dimensionality Reduction using t-SNE
tsne = TSNE(n_components=2, perplexity=30)
tsne_result = tsne.fit_transform(selected_features)

# Clustering using K-Means
kmeans = KMeans(n_clusters=5, random_state=42)
kmeans_labels = kmeans.fit_predict(pca_result)

# Clustering using DBSCAN
dbscan = DBSCAN(eps=0.5, min_samples=5)
dbscan_labels = dbscan.fit_predict(pca_result)

# Evaluation
silhouette_kmeans = silhouette_score(pca_result, kmeans_labels)
silhouette_dbscan = silhouette_score(pca_result, dbscan_labels)
davies_bouldin_kmeans = davies_bouldin_score(pca_result, kmeans_labels)
davies_bouldin_dbscan = davies_bouldin_score(pca_result, dbscan_labels)

print(f'K-Means Silhouette Score: {silhouette_kmeans}')
print(f'DBSCAN Silhouette Score: {silhouette_dbscan}')
print(f'K-Means Davies-Bouldin Score: {davies_bouldin_kmeans}')
print(f'DBSCAN Davies-Bouldin Score: {davies_bouldin_dbscan}')

# Plotting PCA results
plt.figure(figsize=(14, 7))
plt.subplot(1, 2, 1)
sns.scatterplot(x=pca_result[:, 0], y=pca_result[:, 1], hue=kmeans_labels, palette='viridis')
plt.title('K-Means Clustering on PCA Reduced Data')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')

plt.subplot(1, 2, 2)
sns.scatterplot(x=pca_result[:, 0], y=pca_result[:, 1], hue=dbscan_labels, palette='viridis')
plt.title('DBSCAN Clustering on PCA Reduced Data')
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')

plt.show()

# Plotting t-SNE results
plt.figure(figsize=(14, 7))
plt.subplot(1, 2, 1)
sns.scatterplot(x=tsne_result[:, 0], y=tsne_result[:, 1], hue=kmeans_labels, palette='viridis')
plt.title('K-Means Clustering on t-SNE Reduced Data')
plt.xlabel('t-SNE Component 1')
plt.ylabel('t-SNE Component 2')

plt.subplot(1, 2, 2)
sns.scatterplot(x=tsne_result[:, 0], y=tsne_result[:, 1], hue=dbscan_labels, palette='viridis')
plt.title('DBSCAN Clustering on t-SNE Reduced Data')
plt.xlabel('t-SNE Component 1')
plt.ylabel('t-SNE Component 2')

plt.show()